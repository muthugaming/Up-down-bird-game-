import pygame
from pygame.locals import *
from OpenGL.GL import *
from OpenGL.GLU import *
import random
import sys

# Screen settings
SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600

# Bird settings
bird_pos = [0, 0, -5]
bird_size = 0.3
bird_velocity = 0
bird_gravity = 0.01
bird_lift = -0.2

# Pipe settings
pipe_gap = 1.5
pipe_width = 0.5
pipe_distance = 2.5
pipes = []

# Initialize Pygame
pygame.init()
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT), DOUBLEBUF | OPENGL)
pygame.display.set_caption("3D Flappy Bird")

# OpenGL setup
glMatrixMode(GL_PROJECTION)
gluPerspective(45, (SCREEN_WIDTH / SCREEN_HEIGHT), 0.1, 50.0)
glTranslatef(0.0, 0.0, -5)

# Pipe creation function
def create_pipe():
    height = random.uniform(-1, 1)
    top_pipe = (height + pipe_gap / 2, height + pipe_gap)
    bottom_pipe = (height - pipe_gap, height - pipe_gap / 2)
    pipes.append((top_pipe, bottom_pipe))

# Draw bird
def draw_bird():
    glPushMatrix()
    glTranslatef(bird_pos[0], bird_pos[1], bird_pos[2])
    glColor3f(1.0, 1.0, 0.0)  # Yellow color
    glBegin(GL_QUADS)
    glVertex3f(-bird_size, bird_size, 0)
    glVertex3f(bird_size, bird_size, 0)
    glVertex3f(bird_size, -bird_size, 0)
    glVertex3f(-bird_size, -bird_size, 0)
    glEnd()
    glPopMatrix()

# Draw pipes
def draw_pipes():
    for top_pipe, bottom_pipe in pipes:
        glPushMatrix()
        glTranslatef(0, top_pipe[1], -pipe_distance)
        glColor3f(0.0, 1.0, 0.0)  # Green color
        glBegin(GL_QUADS)
        glVertex3f(-pipe_width, pipe_gap / 2, 0)
        glVertex3f(pipe_width, pipe_gap / 2, 0)
        glVertex3f(pipe_width, -pipe_gap / 2, 0)
        glVertex3f(-pipe_width, -pipe_gap / 2, 0)
        glEnd()
        glPopMatrix()

# Collision detection
def check_collision():
    for top_pipe, bottom_pipe in pipes:
        if abs(bird_pos[2] + pipe_distance) < bird_size:
            if bird_pos[1] > top_pipe[0] or bird_pos[1] < bottom_pipe[0]:
                return True
    return False

# Game reset
def reset_game():
    global bird_pos, bird_velocity, pipes
    bird_pos = [0, 0, -5]
    bird_velocity = 0
    pipes.clear()
    create_pipe()

# Main game loop
clock = pygame.time.Clock()
create_pipe()

while True:
    for event in pygame.event.get():
        if event.type == QUIT:
            pygame.quit()
            sys.exit()
        if event.type == KEYDOWN:
            if event.key == K_SPACE:
                bird_velocity = bird_lift

    # Bird movement
    bird_velocity += bird_gravity
    bird_pos[1] += bird_velocity

    # Move pipes
    for i in range(len(pipes)):
        pipes[i] = ((pipes[i][0][0], pipes[i][0][1] - 0.01), (pipes[i][1][0], pipes[i][1][1] - 0.01))

    # Check collision
    if check_collision() or bird_pos[1] <= -3 or bird_pos[1] >= 3:
        reset
